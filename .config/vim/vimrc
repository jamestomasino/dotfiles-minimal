""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" BUNDLES """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

filetype off

let data_dir = $XDG_CONFIG_HOME . '/vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$XDG_DATA_HOME/vim/plugged')

" Global
Plug 'embear/vim-localvimrc'                 " override vimrc per repo
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " install fzf
Plug 'junegunn/fzf.vim'                      " fzf vim integration
Plug 'inkarkat/vim-ReplaceWithRegister'      " smarter replacement from register

" Writing/Authoring Tools
Plug 'reedes/vim-pencil'                     " Super-powered writing things
Plug 'tpope/vim-abolish'                     " Fancy abbreviation replacements
Plug 'junegunn/goyo.vim'                     " Full screen writing mode
Plug 'vimwiki/vimwiki', { 'branch' : 'dev' } " Wiki

" Styling
Plug 'romainl/Apprentice'                    " color scheme
Plug 'preservim/vim-colors-pencil'           " color scheme


" Development Tools
Plug 'tpope/vim-commentary'                  " easy comment toggling
Plug 'airblade/vim-gitgutter'                " pretty git sidebar
Plug 'tpope/vim-fugitive'                    " git integration
Plug 'dense-analysis/ale'                    " syntax highlighting
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'
" Plug 'rhysd/vim-lsp-ale'
" Plug 'ollykel/v-vim'                         " v-lang support
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""" FUNCTIONS """"""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! InitDirs()
    let l:parent = $XDG_DATA_HOME
    let l:prefix = 'vim'
    let l:dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let l:dir_list['undo'] = 'undodir'
    endif

    let l:common_dir = l:parent . '/' . l:prefix

    for [l:dirname, l:settingname] in items(l:dir_list)
        let l:directory = l:common_dir . l:dirname . '/'
        if exists('*mkdir')
            if !isdirectory(l:directory)
                call mkdir(l:directory)
            endif
        endif
        if !isdirectory(l:directory)
            echo 'Warning: Unable to create backup directory: ' . l:directory
            echo 'Try: mkdir -p ' . l:directory
        else
            let l:directory = substitute(l:directory, ' ', '\\\\ ', 'g')
            exec 'set ' . l:settingname . '=' . l:directory
        endif
    endfor
endfunction
call InitDirs()

function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
    endif
endfunction

function! Print()
    let &printheader = " "
    hardcopy > %:r.ps
    !ps2pdf %:r.ps
    !rm %:r.ps
endfunction

function! AsciiMode()
  syntax off
  setlocal virtualedit=all
  setlocal cc=80
  hi ColorColumn ctermbg=8 guibg=8
  autocmd BufWritePre * :%s/\s\+$//e
endfunction

function! MyHighlights() abort
    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    highlight clear CursorLineNR    " disable color block on curretn line
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" AUTOCMD """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('autocmd')

    augroup fzf
        autocmd! FileType fzf
        autocmd  FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
    augroup END

    augroup func_whitespace
        autocmd!
        autocmd FileType c,vimwiki,cpp,java,go,php,javascript,python,twig,text,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    augroup END

    augroup type_gitcommit
        autocmd!
        autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
        autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    augroup END

    augroup pencil
        autocmd!
        autocmd FileType markdown,mkd call pencil#init()
                    \ | setl spell spl=en_us fdl=4 noru nonu nornu
                    \ | setl fdo+=search
    augroup END

    augroup gemini
        autocmd!
        autocmd BufNewFile,BufRead *.gmi   set filetype=gemini
        autocmd filetype gemini setlocal tw=120
        autocmd filetype gemini call pencil#init({'wrap': 'soft'})
                    \ | setl spell spl=en_us fdl=4 noru nonu nornu
                    \ | setl fdo+=search
        autocmd filetype gemini let g:indentLine_enabled = 0
    augroup END

    augroup text
        autocmd!
        autocmd filetype text let g:indentLine_enabled = 0
    augroup END

    augroup ejs
        autocmd!
        au BufNewFile,BufRead *.ejs set filetype=html
    augroup END

    augroup markdown
        autocmd!
        autocmd filetype markdown let g:indentLine_enabled = 0
        autocmd filetype markdown setlocal tw=80
    augroup END

    augroup mjml
        autocmd!
        autocmd BufNewFile,BufRead *.mjml   set filetype=mjml
        autocmd BufNewFile,BufRead *.mjml   set syntax=html
    augroup END

    augroup mycolors
        autocmd!
        autocmd ColorScheme * call MyHighlights()
    augroup END

    augroup mail
        autocmd!
        autocmd filetype mail setlocal formatoptions-=t
    augroup END

    augroup vlang
      let g:v_autofmt_bufwritepre = 1
    augroup END
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" General Lets {{{
let g:mapleader = ','
let b:match_ignorecase = 1
" }}}

" miscelanious settings {{{
filetype plugin indent on       " Automatically detect file types.
syntax on                       " Syntax highlighting
set encoding=utf-8              " utf-8 all the things
scriptencoding utf-8            " utf-8 all the things
" }}}


" Indent Guides {{{
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0
" }}}

" Pencil / Writing Controls {{{
let g:pencil#wrapModeDefault = 'soft'
let g:pencil#textwidth = 74
let g:pencil#joinspaces = 0
let g:pencil#cursorwrap = 1
let g:pencil#conceallevel = 3
let g:pencil#concealcursor = 'c'
let g:pencil#softDetectSample = 20
let g:pencil#softDetectThreshold = 130
" }}}

" LSP {{{
let g:lsp_settings_filetype_vue = ['typescript-language-server', 'volar-server']
let g:lsp_diagnostics_signs_error = {'text': 'âœ—'}
let g:lsp_diagnostics_signs_warning = {'text': '!'}
let g:lsp_diagnostics_signs_hint = {'text': 'ðŸ’¡'}
let g:lsp_diagnostics_signs_information = {'text': '!'}

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    set foldmethod=expr
          \ foldexpr=lsp#ui#vim#folding#foldexpr()
          \ foldtext=lsp#ui#vim#folding#foldtext()
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gq call lsp#disable()
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> <leader>nd <plug>(lsp-previous-diagnostic)
    nmap <buffer> <leader>pd <plug>(lsp-next-diagnostic)
    nmap <buffer> <leader>K <plug>(lsp-hover)
    let g:lsp_format_sync_timeout = 1000
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
" }}}

" Local vimrc loading {{{
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0
" }}}

" VimWiki Config {{{
let g:vimwiki_list = [
            \{'path': '~/.syncthing/wiki/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/computers/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/crafts/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/films/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/games/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/music/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/writing/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/work/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'},
            \{'path': '~/.syncthing/wiki/books/', 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '-'}]
let g:vimwiki_map_prefix = '<Leader>W'
let g:vimwiki_global_ext = 0
let g:vimwiki_auto_chdir = 1
" }}}

" ag support {{{
if executable('ag')
    set grepprg=ag\ --ignore\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" }}}

" sets {{{
set autoindent                  " Indent at the same level of the previous line
set vb t_vb=                    " Disable visual bell
set backspace=indent,eol,start  " Backspace for dummies
set background=light            " Use dark theme
set backup                      " Backups are nice ...
set clipboard^=unnamed,unnamedplus " use system clipboard(s)
set colorcolumn=80,120          " Highlight 80 columns and 140 for wide
set cursorline                  " Highlight current line
set expandtab                   " Spaces by default
set fileencoding=utf-8          " utf-8 all the things
set foldlevelstart=20           " Start with everything open
set foldmethod=manual           " Define folds manually as we go
set hidden                      " Allow buffer switching without saving
set history=1000                " Store a ton of history (default is 20)
set hlsearch                    " Highlight search terms
set ignorecase                  " Case insensitive search
set incsearch                   " Find as you type search
set lazyredraw                  " save energy and processing power
set linespace=0                 " No extra spaces between rows
set list                        " Display invisible characters defined below
set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " Highlight problematic whitespace
set mouse=                      " Automatically disable mouse usage
set mousehide                   " Hide the mouse cursor while typing
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set noshowcmd                   " Don't show the current command
set nowrap                      " Do not wrap long lines
set relativenumber number       " Use relative line numbers
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set shiftwidth=2                " Default spacing
set shortmess+=aoOtTI           " Abbrev. of messages (avoids 'hit enter')
set showmatch                   " Show matching brackets/parenthesis
set showmode                    " Display the current mode
set tabstop=2                   " Default spacing
set softtabstop=2               " Default spacing
set splitbelow                  " Puts new split windows to the bottom of the current
set splitright                  " Puts new vsplit windows to the right of the current
set tabpagemax=15               " Only show 15 tabs
set tags=./tags,tags;$HOME      " Set location for tags files
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore         " Allow for cursor beyond last character
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set wildmenu                    " Use multiple completion lists as below
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set winminheight=0              " Windows can be 0 line high
set completeopt+=menuone,noselect,noinsert

colorscheme apprentice           " Enable color scheme

" conditional settings {{{
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif
" }}}

" Statusline {{{
if has('statusline')
    set laststatus=2

    set statusline=
    set statusline+=%#Search#\ %n
    set statusline+=\ %#PmenuSel#
    set statusline+=%#CursorLine#
    set statusline+=\ %f
    set statusline+=\ %h%m%r%w
    set statusline+=%=
    set statusline+=\ %y
    set statusline+=\ %#Menu#
    set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
    set statusline+=\ [%{&fileformat}\]
    set statusline+=\ %#PmenuSel#
    set statusline+=\ %p%%
    set statusline+=\ %l:%c
    set statusline+=\ 
endif
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" MAPPINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tweak existing keys for more natural operation {{{
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap Y y$
xnoremap < <gv
xnoremap > >gv
xnoremap . :normal .<CR>
" }}}

" Delete and put with black hole register {{{
xnoremap <Leader>p "_dP
nnoremap <Leader>d "_d
xnoremap <Leader>d "_d
set pastetoggle=<Leader>z
" }}}

" Buffers {{{
nnoremap <Leader>a :Files<CR>
nnoremap <Leader>A :GFiles<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>s :b#<cr>
nnoremap <leader>w :bd<cr>
" }}}

" asynccomplete {{{
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" }}}

" Make {{{
nnoremap <Leader>m :make<space>
" }}}

" Gophermap mappings {{{
nnoremap <Leader>gl :PencilOff<CR>:set tw=9999<CR>
nnoremap <Leader>gm :PencilHard<CR>:set tw=66<CR>
" }}}

" Insert Date for notes {{{
nnoremap <Leader>ts :pu! =strftime('%Y-%m-%d')<cr>A<space>
nnoremap <Leader>tj :pu! =printf('%.5f', strftime('%s') / 86400.0 + 2440587.5)<cr>A<space>
" }}}

" Move blocks up and down {{{
xnoremap <C-Up> xkP`[V`]
xnoremap <C-Down> xp`[V`]
nnoremap <C-Up> ddkP
nnoremap <C-Down> ddp
" }}}

" Fold selection {{{
nnoremap <Leader><space> za
xnoremap <Leader><Space> zf
" }}}

" Splits {{{
nnoremap <Leader>\| :vsp<CR>
nnoremap <Leader>- :sp<CR>
nnoremap <Leader>j <C-W><C-J>
nnoremap <Leader>k <C-W><C-K>
nnoremap <Leader>l <C-W><C-L>
nnoremap <Leader>h <C-W><C-H>
nnoremap <Leader>J :resize +5<CR>
nnoremap <Leader>K :resize -5<CR>
nnoremap <Leader>H :vertical resize -5<CR>
nnoremap <Leader>L :vertical resize +5<CR>
" }}}

" File actions {{{
cnoremap %% <C-R>=expand('%:h').'/'<CR>
" }}}

" Diff conflict actions {{{
nnoremap <Leader>cn ]cn                 " next conflict
nnoremap <Leader>cN [c                  " prev conflict
nnoremap <Leader>cc :diffupdate<CR>     " update diffs
nnoremap <Leader>ch :diffget //2<CR>    " keep local contents (left)
nnoremap <Leader>cl :diffget //3<CR>    " use merge contents (right)
" }}}

" command mode helpers {{{
cnoremap w!! w !sudo tee % >/dev/null
cnoremap cd. lcd %:p:h
" }}}

" clear search results {{{
nnoremap <silent> <Leader>/ :nohlsearch<CR>
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" LOCAL OVERRIDES """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif

" vim: set sw=4 sts=4 et tw=78 nospell:
