""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" BUNDLES """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

filetype off

let data_dir = $XDG_CONFIG_HOME . '/vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$XDG_DATA_HOME/vim/plugged')

" Global
Plug 'embear/vim-localvimrc'              " override vimrc per repo
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " install fzf
Plug 'junegunn/fzf.vim'                   " fzf vim integration
Plug 'ervandew/supertab'                  " more natural tab-completion
Plug 'inkarkat/vim-ReplaceWithRegister'   " smarter replacement from register

" Writing/Authoring Tools
Plug 'reedes/vim-pencil'                  " Super-powered writing things
Plug 'tpope/vim-abolish'                  " Fancy abbreviation replacements
Plug 'junegunn/goyo.vim'                  " Full screen writing mode
Plug 'vimwiki/vimwiki', { 'branch' : 'dev' } " Wiki

" Styling
Plug 'romainl/Apprentice'                 " color scheme
Plug 'itchyny/landscape.vim'              " color scheme

" Development Tools
Plug 'tpope/vim-commentary'               " easy comment toggling
Plug 'airblade/vim-gitgutter'             " pretty git sidebar
Plug 'tpope/vim-fugitive'                 " git integration
Plug 'storyn26383/vim-vue'                " extra syntax support for vue
Plug 'sheerun/vim-polyglot'               " syntax for everything
Plug 'dense-analysis/ale'                 " linting for everything
Plug 'jonsmithers/vim-html-template-literals' " special support for template lit
Plug 'pangloss/vim-javascript'            " explicit js syntax help for ^

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""" FUNCTIONS """"""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! InitDirs()
    let l:parent = $XDG_DATA_HOME
    let l:prefix = 'vim'
    let l:dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let l:dir_list['undo'] = 'undodir'
    endif

    let l:common_dir = l:parent . '/' . l:prefix

    for [l:dirname, l:settingname] in items(l:dir_list)
        let l:directory = l:common_dir . l:dirname . '/'
        if exists('*mkdir')
            if !isdirectory(l:directory)
                call mkdir(l:directory)
            endif
        endif
        if !isdirectory(l:directory)
            echo 'Warning: Unable to create backup directory: ' . l:directory
            echo 'Try: mkdir -p ' . l:directory
        else
            let l:directory = substitute(l:directory, ' ', '\\\\ ', 'g')
            exec 'set ' . l:settingname . '=' . l:directory
        endif
    endfor
endfunction
call InitDirs()

function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
    endif
endfunction

function! Print()
    let &printheader = " "
    hardcopy > %:r.ps
    !ps2pdf %:r.ps
    !rm %:r.ps
endfunction

function! AsciiMode()
  syntax off
  setlocal virtualedit=all
  setlocal cc=80
  hi ColorColumn ctermbg=8 guibg=8
  autocmd BufWritePre * :%s/\s\+$//e
endfunction

function! MyHighlights() abort
    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    highlight clear CursorLineNR    " disable color block on curretn line
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" AUTOCMD """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('autocmd')

    augroup fzf
        autocmd! FileType fzf
        autocmd  FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
    augroup END

    augroup func_whitespace
        autocmd!
        autocmd FileType c,markdown,vimwiki,cpp,java,go,php,javascript,python,twig,text,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    augroup END

    augroup type_gitcommit
        autocmd!
        autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
        autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    augroup END

    augroup pencil
        autocmd!
        autocmd FileType markdown,mkd call pencil#init()
                    \ | setl spell spl=en_us fdl=4 noru nonu nornu
                    \ | setl fdo+=search
    augroup END

    augroup type_html
        autocmd!
        autocmd filetype html setlocal shiftwidth=2
        autocmd filetype html setlocal softtabstop=2
        autocmd filetype html setlocal tabstop=2
        autocmd filetype html setlocal noexpandtab
        autocmd filetype html setlocal foldmethod=syntax
    augroup END

    augroup type_awk
        autocmd!
        autocmd filetype awk setlocal shiftwidth=2
        autocmd filetype awk setlocal softtabstop=2
        autocmd filetype awk setlocal tabstop=2
        autocmd filetype awk setlocal noexpandtab
        autocmd filetype awk setlocal foldmethod=syntax
    augroup END

    augroup type_javascript
        autocmd!
        autocmd filetype javascript setlocal shiftwidth=2
        autocmd filetype javascript setlocal softtabstop=2
        autocmd filetype javascript setlocal tabstop=2
        autocmd filetype javascript setlocal expandtab
        autocmd filetype javascript setlocal foldmethod=syntax
    augroup END

    augroup type_vue
        autocmd!
        let g:vue_disable_pre_processors=1
        autocmd filetype vue syntax sync fromstart
    augroup END

    augroup type_css
        autocmd!
        autocmd filetype css,scss setlocal noexpandtab
        autocmd filetype css,scss setlocal softtabstop=2
        autocmd filetype css,scss setlocal shiftwidth=2
        autocmd filetype css,scss setlocal tabstop=2
    augroup END

    augroup type_python
        autocmd!
        autocmd filetype python setlocal expandtab
        autocmd filetype python setlocal softtabstop=4
        autocmd filetype python setlocal shiftwidth=4
        autocmd filetype python setlocal tabstop=4
    augroup END

    augroup type_json
        autocmd!
        autocmd filetype json set conceallevel=0
    augroup END

    augroup type_make
        autocmd!
        autocmd filetype make setlocal noexpandtab
        autocmd filetype make setlocal softtabstop=4
        autocmd filetype make setlocal shiftwidth=4
        autocmd filetype make setlocal tabstop=4
    augroup END

    augroup bundle_php
        autocmd!
        autocmd filetype php setlocal expandtab
        autocmd filetype php setlocal softtabstop=2
        autocmd filetype php setlocal shiftwidth=2
        autocmd filetype php setlocal tabstop=2
    augroup END

    augroup gemini
        autocmd!
        autocmd BufNewFile,BufRead *.gmi   set filetype=gemini
        autocmd filetype gemini setlocal tw=120
        autocmd filetype gemini call pencil#init({'wrap': 'soft'})
                    \ | setl spell spl=en_us fdl=4 noru nonu nornu
                    \ | setl fdo+=search
        autocmd filetype gemini let g:indentLine_enabled = 0
    augroup END

    augroup text
        autocmd!
        autocmd filetype text let g:indentLine_enabled = 0
    augroup END

    augroup markdown
        autocmd!
        autocmd filetype markdown let g:indentLine_enabled = 0
    augroup END

    augroup mycolors
        autocmd!
        autocmd ColorScheme * call MyHighlights()
    augroup END

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" General Lets {{{
let g:mapleader = ','
let b:match_ignorecase = 1
" }}}

" miscelanious settings {{{
filetype plugin indent on       " Automatically detect file types.
syntax on                       " Syntax highlighting
set encoding=utf-8              " utf-8 all the things
scriptencoding utf-8            " utf-8 all the things
" }}}


" Indent Guides {{{
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0
" }}}

" Pencil / Writing Controls {{{
let g:pencil#wrapModeDefault = 'soft'
let g:pencil#textwidth = 74
let g:pencil#joinspaces = 0
let g:pencil#cursorwrap = 1
let g:pencil#conceallevel = 3
let g:pencil#concealcursor = 'c'
let g:pencil#softDetectSample = 20
let g:pencil#softDetectThreshold = 130
" }}}

" Tagbar {{{
nmap <F8> :TagbarToggle<CR>
" }}}

" Local vimrc loading {{{
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0
" }}}

" VimWiki Config {{{
let g:vimwiki_list = [{'path': '~/.syncthing/wiki/', 'syntax': 'markdown', 'ext': '.wiki', 'links_space_char': '-'}]
let g:vimwiki_map_prefix = '<Leader>W'
let g:vimwiki_global_ext = 0
let g:vimwiki_auto_chdir = 1
" }}}

" ag support {{{
if executable('ag')
    set grepprg=ag\ --ignore\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" }}}

" sets {{{
set autoindent                  " Indent at the same level of the previous line
set vb t_vb=                    " Disable visual bell
set backspace=indent,eol,start  " Backspace for dummies
set background=light            " Use dark theme
set backup                      " Backups are nice ...
set clipboard^=unnamed,unnamedplus " use system clipboard(s)
set colorcolumn=80,120          " Highlight 80 columns and 140 for wide
set cursorline                  " Highlight current line
set expandtab                   " Spaces by default
set fileencoding=utf-8          " utf-8 all the things
set foldlevelstart=20           " Start with everything open
set foldmethod=manual           " Define folds manually as we go
set hidden                      " Allow buffer switching without saving
set history=1000                " Store a ton of history (default is 20)
set hlsearch                    " Highlight search terms
set ignorecase                  " Case insensitive search
set incsearch                   " Find as you type search
set lazyredraw                  " save energy and processing power
set linespace=0                 " No extra spaces between rows
set list                        " Display invisible characters defined below
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set mouse=                      " Automatically disable mouse usage
set mousehide                   " Hide the mouse cursor while typing
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set noshowcmd                   " Don't show the current command
set nowrap                      " Do not wrap long lines
set relativenumber number       " Use relative line numbers
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set shiftwidth=2                " Default spacing
set shortmess+=aoOtTI           " Abbrev. of messages (avoids 'hit enter')
set showmatch                   " Show matching brackets/parenthesis
set showmode                    " Display the current mode
set softtabstop=2               " Default spacing
set splitbelow                  " Puts new split windows to the bottom of the current
set splitright                  " Puts new vsplit windows to the right of the current
set tabpagemax=15               " Only show 15 tabs
set tags=./tags,tags;$HOME      " Set location for tags files
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore         " Allow for cursor beyond last character
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set wildmenu                    " Use multiple completion lists as below
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set winminheight=0              " Windows can be 0 line high

colorscheme apprentice           " Enable color scheme

" conditional settings {{{
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif
" }}}

" Statusline {{{
if has('statusline')
    set laststatus=2

    set statusline=
    set statusline+=%#Search#\ %n
    set statusline+=\ %#PmenuSel#
    set statusline+=%#CursorLine#
    set statusline+=\ %f
    set statusline+=\ %h%m%r%w
    set statusline+=%=
    set statusline+=\ %y
    set statusline+=\ %#Menu#
    set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
    set statusline+=\ [%{&fileformat}\]
    set statusline+=\ %#PmenuSel#
    set statusline+=\ %p%%
    set statusline+=\ %l:%c
    set statusline+=\ 
endif
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" MAPPINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tweak existing keys for more natural operation {{{
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap Y y$
xnoremap < <gv
xnoremap > >gv
xnoremap . :normal .<CR>
" }}}

" Delete and put with black hole register {{{
xnoremap <Leader>p "_dP
nnoremap <Leader>d "_d
xnoremap <Leader>d "_d
set pastetoggle=<Leader>z
" }}}

" Buffers {{{
nnoremap <Leader>a :Files<CR>
nnoremap <Leader>A :GFiles<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>s :b#<cr>
nnoremap <leader>w :bd<cr>
" }}}



" Make {{{
nnoremap <Leader>m :make<space>
" }}}

" Gophermap mappings {{{
nnoremap <Leader>gl :PencilOff<CR>:set tw=9999<CR>
nnoremap <Leader>gm :PencilHard<CR>:set tw=66<CR>
" }}}

" Insert Date for notes {{{
nnoremap <Leader>ts :pu! =strftime('%Y-%m-%d')<cr>A<space>
nnoremap <Leader>tj :pu! =printf('%.5f', strftime('%s') / 86400.0 + 2440587.5)<cr>A<space>
" }}}

" Move blocks up and down {{{
xnoremap <C-Up> xkP`[V`]
xnoremap <C-Down> xp`[V`]
nnoremap <C-Up> ddkP
nnoremap <C-Down> ddp
" }}}

" Fold selection {{{
nnoremap <Leader><space> za
xnoremap <Leader><Space> zf
" }}}

" Splits {{{
nnoremap <Leader>\| :vsp<CR>
nnoremap <Leader>- :sp<CR>
nnoremap <Leader>j <C-W><C-J>
nnoremap <Leader>k <C-W><C-K>
nnoremap <Leader>l <C-W><C-L>
nnoremap <Leader>h <C-W><C-H>
nnoremap <Leader>J :resize +5<CR>
nnoremap <Leader>K :resize -5<CR>
nnoremap <Leader>H :vertical resize -5<CR>
nnoremap <Leader>L :vertical resize +5<CR>
" }}}

" File actions {{{
cnoremap %% <C-R>=expand('%:h').'/'<CR>
" }}}

" Diff conflict actions {{{
nnoremap <Leader>cn ]cn                 " next conflict
nnoremap <Leader>cN [c                  " prev conflict
nnoremap <Leader>cc :diffupdate<CR>     " update diffs
nnoremap <Leader>ch :diffget //2<CR>    " keep local contents (left)
nnoremap <Leader>cl :diffget //3<CR>    " use merge contents (right)
" }}}

" command mode helpers {{{
cnoremap w!! w !sudo tee % >/dev/null
cnoremap cd. lcd %:p:h
" }}}

" clear search results {{{
nnoremap <silent> <Leader>/ :nohlsearch<CR>
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" LOCAL OVERRIDES """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif

" vim: set sw=4 sts=4 et tw=78 nospell:
